detach()
attach(ROMSNPZdat)
GFDL_RCP45
scaled1=TRUE
recentered1=FALSE
fn.dat="/Data/dat_input_files/retro_data2015.dat"
fn.fut.dat="/Data/dat_input_files/projection_data2015.dat"
if(scaled1==TRUE&recentered1==TRUE)			datuse<-recentered_scaled  	# 	recentered_scaled (scaled and recentered)
if(scaled1==TRUE&recentered1==FALSE)			datuse<-scaled 				#	Zscore scaled (not centered)
if(scaled1==FALSE&recentered1==TRUE)			datuse<-recentered  		# 	recentered (not scaled, recentered)
if(scaled1==FALSE&recentered1==FALSE)			datuse<-original 			#	original (not scaled or centered)
# which data to use for covariates, can be:
## Mixed effect temperature specific VonB  (sensu Holsman et al. 2016)
## Kirstin Holsman
## 2016
rm(list=ls())
setwd("/Users/kkari/GitHub/TMB_ADMB_workshop/R_examples/KirVonB")
load("LWA_ALL.Rdata")
dat.all<-na.omit(data.frame(
age=LWA_ALL$AGE,
weight=LWA_ALL$WEIGHT,
Temp=LWA_ALL$GEAR_TEMPERATURE,
Sp=factor(LWA_ALL$GOAPOLL_PRED)))
# R=factor(LWA_ALL$REGION),
# Sp=factor(LWA_ALL$GOAPOLL_PRED),
# Sex=factor(LWA_ALL$SEX),
# L=LWA_ALL$LENGTH,
# )
dat<-dat.all[which(dat.all$Sp=="WALLEYE POLLOCK"),]
par<-list(
H=9.0,
K=0.5,
t0=-0.25,
log_mean_d= -.5,
logSigma= -.2,
Tcoef=0)
mapp<-list(
H=factor("H"),
K=factor("K"),
t0=factor("T0"),
log_mean_d=factor("log_mean_d"),
logSigma= factor("logSigma"),
Tcoef=factor(NA))
require(TMB)
# precompile()
compile('KirVonB.cpp',"-o0 -g")
dyn.load(dynlib('KirVonB'))
model<-MakeADFun(data=dat,parameters=par,DLL='KirVonB',map=mapp)#,map=list(H=factor(1),K=factor(2),c=factor(NA)))
fit<-nlminb(model$env$last.par.best,model$fn,model$gr)
for(i in 1:3)
fit<-nlminb(model$env$last.par.best,model$fn,model$gr)
rep<-sdreport(model,getJointPrecision=TRUE)
rep
model$env$last.par.best
names(model$env$last.par.best)
data.frame)
data.frame(model$env$last.par.best)
test<-data.frame(model$env$last.par.best)
test$H
est<-data.frame(t(model$env$last.par.best))
est
est$H
H<-est$H
K<-est$K
t0<-est$t0
log_mean_d<-est$log_mean_d
logSigma<-est$logSigma
dat$weight
nobs=legnth(dat$weight)
nobs=length(dat$weight)
nobs<-length(newdat$weight)
newdat=dat
nobs<-length(newdat$weight)
i<-1
d[i]<-        exp(log_mean_d+Tcoef*Temp[i]) # //mfexp(log_mean_d+Pcoef*Pval_lag1(i)+Tcoef*Temp(i));
est$Tcoef<-0
est
d[i]<-        exp(log_mean_d+Tcoef*Temp[i]) # //mfexp(log_mean_d+Pcoef*Pval_lag1(i)+Tcoef*Temp(i));
Tcoef<-est$Tcoef
d[i]<-        exp(log_mean_d+Tcoef*Temp[i]) # //mfexp(log_mean_d+Pcoef*Pval_lag1(i)+Tcoef*Temp(i));
Winf[i]       <-(H/K)^(1.0/(1.0 - d(i)) )
d<-Winf<-logWhat<-rep(0,nobs)
d[i]			<-exp(log_mean_d+Tcoef*newdat$Temp[i]) # //mfexp(log_mean_d+Pcoef*Pval_lag1(i)+Tcoef*Temp(i));
Winf[i]       <-(H/K)^(1.0/(1.0 - d(i)) )
Winf[i]       <-(H/K)^(1.0/(1.0 - d[i] )
logWhat[i]    <-log(Winf[i] + (1.0/(1.0 - d[i])*log(1.0 - exp(-K * (1.0 - d[i] * (newdat$age[i] - t0)))
(H/K)
Winf[i]       <-(H/K)^(1.0/(1.0 - d[i] )
Winf[i]       <-(H/K)^(1.0/(1.0 - d[i] ))
Winf[i]       <-(H/K)^(1.0/(1.0 - d[i] ))
logWhat[i]    <-log(Winf[i] + (1.0/(1.0 - d[i])*log(1.0 - exp(-K * (1.0 - d[i] * (newdat$age[i] - t0)))
logWhat[i]    <-log(Winf[i] + (1.0/(1.0 - d[i]))*log(1.0 - exp(-K * (1.0 - d[i] * (newdat$age[i] - t0)))
logWhat[i]    <-log(Winf[i] + (1.0/(1.0 - d[i]))*log(1.0 - exp(-K * (1.0 - d[i] * (newdat$age[i] - t0)))
logWhat[i]    <-log(Winf[i]) + (1.0/(1.0 - d[i]))*log(1.0 - exp(-K * (1.0 - d[i]) * (newdat$age[i] - t0) ))
logWhat[i]    <-log(Winf[i]) + (1.0/(1.0 - d[i]))*log(1.0 - exp(-K * (1.0 - d[i]) * (newdat$age[i] - t0) ))
logWhat[i]
What<-function(est=est,newdat=dat){
nobs<-length(newdat$weight)
H<-est$H
K<-est$K
t0<-est$t0
Tcoef<-est$Tcoef
log_mean_d<-est$log_mean_d
logSigma<-est$logSigma
d<-Winf<-logWhat<-rep(0,nobs)
for (i in 1:nobs)
{
d[i]			<-exp(log_mean_d+Tcoef*newdat$Temp[i]) # //mfexp(log_mean_d+Pcoef*Pval_lag1(i)+Tcoef*Temp(i));
Winf[i]       <-(H/K)^(1.0/(1.0 - d[i] ))
logWhat[i]    <-log(Winf[i]) + (1.0/(1.0 - d[i]))*log(1.0 - exp(-K * (1.0 - d[i]) * (newdat$age[i] - t0) ))
}
return(What=exp(logWhat),Winf=Winf,d=d)
}
W_hat<-What(est=est,newdat=dat)
What<-function(est=est,newdat=dat){
nobs<-length(newdat$weight)
H<-est$H
K<-est$K
t0<-est$t0
Tcoef<-est$Tcoef
log_mean_d<-est$log_mean_d
logSigma<-est$logSigma
d<-Winf<-logWhat<-rep(0,nobs)
for (i in 1:nobs)
{
d[i]			<-exp(log_mean_d+Tcoef*newdat$Temp[i]) # //mfexp(log_mean_d+Pcoef*Pval_lag1(i)+Tcoef*Temp(i));
Winf[i]       <-(H/K)^(1.0/(1.0 - d[i] ))
logWhat[i]    <-log(Winf[i]) + (1.0/(1.0 - d[i]))*log(1.0 - exp(-K * (1.0 - d[i]) * (newdat$age[i] - t0) ))
}
return(list(What=exp(logWhat),Winf=Winf,d=d))
}
W_hat<-What(est=est,newdat=dat)
W_hat<-What(est=est,newdat=dat)
plot(dat$age,dat$weight,pch=16)
points(dat$age,W_hat,col="red")
points(dat$age,W_hat$What,col="red")
points(dat$age,W_hat$What,col="red",pch=16)
W_hat$Winf
boxplot(data.frame(dat$age,dat$weight))
tapply(dat$weight,dat$age,mean)
plot(dat$age,dat$weight,pch=16)
points(as.numeric(names(mn)),mn,col="red",pch=16)
mn<-tapply(dat$weight,dat$age,mean)
points(as.numeric(names(mn)),mn,col="red",pch=16)
points(dat$age,W_hat$What,col="blue",pch=16)
points(dat$age,W_hat$What,col="gray",pch=16)
dat<-dat[dat$age<=25,]
par<-list(
H=9.0,
K=0.5,
t0=-0.25,
log_mean_d= -.5,
logSigma= -.2,
Tcoef=0)
mapp<-list(
H=factor("H"),
K=factor("K"),
t0=factor("T0"),
log_mean_d=factor("log_mean_d"),
logSigma= factor("logSigma"),
Tcoef=factor(NA))
require(TMB)
# precompile()
compile('KirVonB.cpp',"-o0 -g")
dyn.load(dynlib('KirVonB'))
model<-MakeADFun(data=dat,parameters=par,DLL='KirVonB',map=mapp)#,map=list(H=factor(1),K=factor(2),c=factor(NA)))
fit<-nlminb(model$env$last.par.best,model$fn,model$gr)
for(i in 1:3)
fit<-nlminb(model$env$last.par.best,model$fn,model$gr)
rep<-sdreport(model,getJointPrecision=TRUE)
est<-data.frame(t(model$env$last.par.best))
# est$Tcoef<-0
What<-function(est=est,newdat=dat){
nobs<-length(newdat$weight)
H<-est$H
K<-est$K
t0<-est$t0
Tcoef<-est$Tcoef
log_mean_d<-est$log_mean_d
logSigma<-est$logSigma
d<-Winf<-logWhat<-rep(0,nobs)
for (i in 1:nobs)
{
d[i]			<-exp(log_mean_d+Tcoef*newdat$Temp[i]) # //mfexp(log_mean_d+Pcoef*Pval_lag1(i)+Tcoef*Temp(i));
Winf[i]       <-(H/K)^(1.0/(1.0 - d[i] ))
logWhat[i]    <-log(Winf[i]) + (1.0/(1.0 - d[i]))*log(1.0 - exp(-K * (1.0 - d[i]) * (newdat$age[i] - t0) ))
}
return(list(What=exp(logWhat),Winf=Winf,d=d))
}
W_hat<-What(est=est,newdat=dat)
mn<-tapply(dat$weight,dat$age,mean)
plot(dat$age,dat$weight,pch=16)
points(as.numeric(names(mn)),mn,col="red",pch=16)
points(dat$age,W_hat$What,col="gray",pch=16)
dat
head(dat)
par<-list(
H=9.0,
K=0.5,
t0=-0.25,
log_mean_d= -.5,
logSigma= -.2,
Tcoef=0)
mapp<-list(
H=factor("H"),
K=factor("K"),
t0=factor("T0"),
log_mean_d=factor("log_mean_d"),
logSigma= factor("logSigma"),
Tcoef=factor(NA))
require(TMB)
# precompile()
compile('KirVonB.cpp',"-o0 -g")
dyn.load(dynlib('KirVonB'))
model<-MakeADFun(data=dat,parameters=par,DLL='KirVonB',map=mapp)#,map=list(H=factor(1),K=factor(2),c=factor(NA)))
fit<-nlminb(model$env$last.par.best,model$fn,model$gr)
for(i in 1:3)
fit<-nlminb(model$env$last.par.best,model$fn,model$gr)
rep<-sdreport(model,getJointPrecision=TRUE)
est<-data.frame(t(model$env$last.par.best))
What<-function(est=est,newdat=dat){
nobs<-length(newdat$weight)
H<-est$H
K<-est$K
t0<-est$t0
Tcoef<-est$Tcoef
log_mean_d<-est$log_mean_d
logSigma<-est$logSigma
d<-Winf<-logWhat<-rep(0,nobs)
for (i in 1:nobs)
{
d[i]			<-exp(log_mean_d+Tcoef*newdat$Temp[i]) # //mfexp(log_mean_d+Pcoef*Pval_lag1(i)+Tcoef*Temp(i));
Winf[i]       <-(H/K)^(1.0/(1.0 - d[i] ))
logWhat[i]    <-log(Winf[i]) + (1.0/(1.0 - d[i]))*log(1.0 - exp(-K * (1.0 - d[i]) * (newdat$age[i] - t0) ))
}
return(list(What=exp(logWhat),Winf=Winf,d=d))
}
W_hat<-What(est=est,newdat=dat)
est$Tcoef<-0
W_hat<-What(est=est,newdat=dat)
mn<-tapply(dat$weight,dat$age,mean)
plot(dat$age,dat$weight,pch=16)
points(as.numeric(names(mn)),mn,col="red",pch=16)
points(dat$age,W_hat$What,col="gray",pch=16)
mn<-tapply(log(dat$weight),dat$age,mean)
mn<-tapply(log(dat$weight),dat$age,mean)
plot(dat$age,dat$weight,pch=16)
plot(dat$age,dat$weight,pch=16)
points(as.numeric(names(mn)),exp(mn),col="red",pch=16)
points(dat$age,W_hat$What,col="gray",pch=16)
